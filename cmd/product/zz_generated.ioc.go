//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package main

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &mysqlDBInitializer_{}
		},
	})
	singleton.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &MysqlDBInitializer{}
		},
	})
}

type mysqlDBInitializer_ struct {
	Init_ func()
}

func (m *mysqlDBInitializer_) Init() {
	m.Init_()
}

type MysqlDBInitializerIOCInterface interface {
	Init()
}

func GetMysqlDBInitializerSingleton() (*MysqlDBInitializer, error) {
	i, err := singleton.GetImpl(util.GetSDIDByStructPtr(new(MysqlDBInitializer)), nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*MysqlDBInitializer)
	return impl, nil
}

func GetMysqlDBInitializerIOCInterfaceSingleton() (MysqlDBInitializerIOCInterface, error) {
	i, err := singleton.GetImplWithProxy(util.GetSDIDByStructPtr(new(MysqlDBInitializer)), nil)
	if err != nil {
		return nil, err
	}
	impl := i.(MysqlDBInitializerIOCInterface)
	return impl, nil
}
