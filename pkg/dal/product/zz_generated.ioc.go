//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli

package product

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/ioc-golang/shopping-system/pkg/model/do"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &dAL_{}
		},
	})
	singleton.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &DAL{}
		},
	})
}

type dAL_ struct {
	ListProductByPage_ func(pageIdx, pageSize int) ([]*do.ProductDO, int, error)
}

func (d *dAL_) ListProductByPage(pageIdx, pageSize int) ([]*do.ProductDO, int, error) {
	return d.ListProductByPage_(pageIdx, pageSize)
}

type DALIOCInterface interface {
	ListProductByPage(pageIdx, pageSize int) ([]*do.ProductDO, int, error)
}

func GetDAL() (*DAL, error) {
	i, err := singleton.GetImpl(util.GetSDIDByStructPtr(new(DAL)), nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*DAL)
	return impl, nil
}
func GetDALIOCInterface() (DALIOCInterface, error) {
	i, err := singleton.GetImplWithProxy(util.GetSDIDByStructPtr(new(DAL)), nil)
	if err != nil {
		return nil, err
	}
	impl := i.(DALIOCInterface)
	return impl, nil
}
